/*--------------------------------------------------------------------------------------------------------------------
/ Copyright Â© 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
/ SPDX-License-Identifier: Apache-2.0
/
/ PURPOSE      : 
/ DESCRIPTION  : Stored Procedure for Process Reporting
/--------------------------------------------------------------------------------------------------------------------
/ PARAMETERS USAGE
/--------------------------------------------------------------------------------------------------------------------
/ EXAMPLE:   %fscprocessreporting(jobId=);
/--------------------------------------------------------------------------------------------------------------------*/

%macro fscProcessReporting(jobId=900);

   %put NOTE: {START: fscProcessReporting};

   /*********************************************/
   %let step=Start fscProcessReporting;
   /*********************************************/
   %fscProcess(processAction=START,
               processStatus=,
               jobId=&jobId,
               processParentId=&ppid,
               processId=);
   %fcf_chkrc;
   %if &bat_abort=Y %then %do;
      %put NOTE: STEP: &step;
      %goto exit;
   %end;  

   PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_FSK_JOB_0000 AS 
   SELECT t2.run_date,
          t2.process_parent_id, 
          t1.job_id,
          t1.job_name, 
          t1.job_desc, 
          t2.process_start_dt, 
          t2.process_end_dt, 
          t2.process_status,
          t2.process_id, 
          t3.metric_name, 
          t3.metric_desc, 
          t3.metric_value, 
          /* duration_seconds */
            (t2.process_end_dt - t2.process_start_dt) AS duration_seconds, 
          /* process_date */
            (datepart(t2.process_start_dt) ) FORMAT=date9. AS process_date
      FROM Db_core.fsc_job AS t1, Db_core.fsc_process AS t2, Db_core.fsc_process_metric AS t3
      WHERE (t1.job_id = t2.job_id AND t2.process_id = t3.process_id) and 
            t2.run_date = &runasofdate
      ORDER BY process_date, t1.job_name, t2.process_start_dt, t2.process_id;
   QUIT;
   %fcf_chkrc;
   %if &bat_abort=Y %then %do;
      %put NOTE: STEP: &step;
      %goto exit;
   %end;  


   data AdvListing0000;
     set WORK.QUERY_FOR_FSK_JOB_0000;
     attrib duration  length=8.  format=time10.;
     process_date_2=process_date;
     duration=hms(0,0,duration_seconds);
   run;
   %fcf_chkrc;
   %if &bat_abort=Y %then %do;
      %put NOTE: STEP: &step;
      %goto exit;
   %end;  


   ods excel file="&FCFRPT.report/process_tracking_&runasofdate..xlsx"
      options (embedded_titles='YES' embedded_footnotes='YES' gridlines='YES' sheet_interval='NOW' sheet_name="&runasofdate");
   proc report data=AdvListing0000(FIRSTOBS=1) nowd;
   TITLE1 "Process Metric Report for Run Date: &rundate.";
   FOOTNOTE1 "Generated by the SAS System (&_SASSERVERNAME, &SYSSCPL) on %TRIM(%QSYSFUNC(DATE(), NLDATE20.)) at %TRIM(%SYSFUNC(TIME(), NLTIMAP20.))";
	column process_date process_date_2 job_id job_name process_status process_start_dt cv1 process_end_dt cv2 duration process_id metric_name metric_value cv3;
	define process_date / group format=DATE9. 'process_date' missing noprint order=internal;
	compute process_date;
		if process_date ne . then hold1=process_date;
		if process_date eq . then process_date=hold1;
	endcomp;
	compute before process_date / style=[just=l];
		text1='process_date = '||trim(left(put(process_date,DATE9.)));
		line text1 $;
	endcomp;
	define process_date_2 / group 'process_date' format=DATE9. missing order=internal;
	define job_id / group 'job_id' format=3. missing order=formatted;
	define job_name / group 'job_name' format=$50. missing order=formatted;
	define process_status / group 'process_status' format=$20. missing order=formatted;
	define process_start_dt / group format=DATETIME19. missing noprint order=formatted;
	define cv1 / computed 'process_start_dt' format=DATETIME19. missing;
	compute cv1;
		if process_start_dt ne . then hold2=process_start_dt;
		cv1=hold2;
	endcomp;
	define process_end_dt / group format=DATETIME19. missing noprint order=formatted;
	define cv2 / computed 'process_end_dt' format=DATETIME19. missing;
	compute cv2;
		if process_end_dt ne . then hold3=process_end_dt;
		cv2=hold3;
	endcomp;
	define duration / group format=time10.3 missing order=formatted;
	define process_id / group format=22. order=formatted;
	define metric_name / group 'metric_name' format=$50. missing order=formatted;
	compute metric_name;
		if metric_name ne ' ' then hold4=metric_name;
		if metric_name eq ' ' then metric_name=hold4;
	endcomp;
	define metric_value / group format=11. missing noprint order=formatted;
	define cv3 / computed 'metric_value' format=11. missing;
	compute cv3;
		if metric_value ne . then hold5=metric_value;
		cv3=hold5;
	endcomp;
   run;
   %fcf_chkrc;
   %if &bat_abort=Y %then %do;
      %put NOTE: STEP: &step;
      %goto exit;
   %end;  

   ods excel close;
   
    /*************************************************************/
      %let step='Save process metrics to a csv file';
	/*************************************************************/
    ods csv file="&FCFRPT.report/process_tracking_csv_&runasofdate..csv";
     proc print data=AdvListing0000;
     run;
	 %fcf_chkrc;
     %if &bat_abort=Y %then %do;
         %put NOTE: STEP: &step;
         %goto exit;
     %end;
    ods csv close;

	/**************************************************************/
	 %let step='Load alert counts by scenario to a csv file';
	/**************************************************************/
	 proc sql;
		create table scenario_81 as 
		select scenario_nm
		from SCNARIO.VSD_SCENARIO
		where active_flg=1 and (scenario_nm like 'PUB%' or scenario_nm ='SAS10079' or scenario_nm='ANOMALY_DETECTION')
		order by scenario_nm;
	 quit;
	 %fcf_chkrc;
     %if &bat_abort=Y %then %do;
         %put NOTE: STEP: &step;
         %goto exit;
     %end;

	 proc sql;
		create table alerts_scenario_count_81 as 
		select A.scenario_nm,A.context_start_dttm, count(*) as alert_count
		from alerts.tdc_scenario_fired_event A
		where context_start_dttm="&rundate"dt
		group by A.context_start_dttm,A.scenario_nm
		order by A.context_start_dttm,A.scenario_nm;
	  quit;
	 %fcf_chkrc;
     %if &bat_abort=Y %then %do;
         %put NOTE: STEP: &step;
         %goto exit;
     %end;
	 
	  proc sql;
		create table alerts_scen_count_81_01 as
		select a.scenario_nm, context_start_dttm, alert_count
		from (select scenario_nm
				from SCNARIO.VSD_SCENARIO 
				where active_flg=1 and (scenario_nm like 'PUB%' or scenario_nm ='SAS10079' or scenario_nm='ANOMALY_DETECTION')
			  ) a
		 left join alerts_scenario_count_81 b
		 on a.scenario_nm=b.scenario_nm
		 order by scenario_nm;
	   quit;
	 %fcf_chkrc;
     %if &bat_abort=Y %then %do;
         %put NOTE: STEP: &step;
         %goto exit;
     %end;

	 ods csv file="&FCFRPT.report/alert_counts_csv_&runasofdate..csv";
	 proc print data=alerts_scen_count_81_01;
	 run;
	 %fcf_chkrc;
     %if &bat_abort=Y %then %do;
         %put NOTE: STEP: &step;
         %goto exit;
     %end;
	 ods csv close;
	 
	/**************************************************************/
	 %let step='Load case counts by pub_case_type and pub_case_category to a csv file';
	/**************************************************************/	
	data _null_;
		call symputx('start_dt',put(dhms(input(put(today()-1,date.),date.),00,00,00),datetime.));
		call symputx('end_dt',put(dhms(input(put(today(),date.),date.),00,00,00),datetime.));
	run;
	 %fcf_chkrc;
     %if &bat_abort=Y %then %do;
         %put NOTE: STEP: &step;
         %goto exit;
     %end;
	%put &=start_dt;
	%put &=end_dt; 

	proc sql;
	create table case_counts AS
	select pub_case_type, pub_case_category, count(cases_id) from fdhdata.tm_cases
	where created_at_dttm between "&start_dt"dt and "&end_dt"dt
	and case_status<>'T' and pub_case_description like '%Auto%'
	group by pub_case_type, pub_case_category;
	quit;  
	 %fcf_chkrc;
     %if &bat_abort=Y %then %do;
         %put NOTE: STEP: &step;
         %goto exit;
     %end;
		
	 ods csv file="&FCFRPT.report/case_counts_csv_&runasofdate..csv";
	 proc print data=case_counts;
	 run;
	 %fcf_chkrc;
     %if &bat_abort=Y %then %do;
         %put NOTE: STEP: &step;
         %goto exit;
     %end;
	 ods csv close;
	 
   %fscProcess(processAction=COMPLETE,
               processStatus=SUCCESS,
               jobId=,
               processId=&pid);                                  
   %put NOTE: {END: fscProcessReporting};
   %fcf_chkrc;
   %if &bat_abort=Y %then %do;
      %put NOTE: STEP: &step;
      %goto exit;
   %end;  
   
   %let syscc=0;

   %exit:
   %if &bat_abort=Y %then %do;
      %fscProcess(processAction=COMPLETE,
                  processStatus=ERROR,
                  jobId=,
                  processId=&pid);
      %abort return 5;
   %end;

%mend;

/* %pub_getrunasofdate; */
/* %let runasofdate=20200407; */
/* %let rundate=07APR2020:00:00:00; */
/* %put RunDate: &runasofdate &rundate; */
/* %fscProcessReporting; */

